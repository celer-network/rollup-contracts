// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sidechain

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TokenMapperABI is the input ABI used to generate the binding from.
const TokenMapperABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mainchainToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sidechainToken\",\"type\":\"address\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mainchainTokenToSidechainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"mapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sidechainTokenToMainchainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenMapperBin is the compiled bytecode used for deploying new contracts.
var TokenMapperBin = "0x608060405260006100146100b760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100bf565b600033905090565b6139c5806100ce6000396000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c806398aed3ff116200006357806398aed3ff1462000109578063e5d24c321462000190578063ed51c1c81462000217578063f2fde38b14620003df5762000088565b8063715018a6146200008d5780638da5cb5b14620000995780638f32d59b14620000e5575b600080fd5b6200009762000426565b005b620000a362000562565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620000ef6200058b565b604051808215151515815260200191505060405180910390f35b6200014e600480360360208110156200012157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620005eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620001d560048036036020811015620001a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200061e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200039d600480360360808110156200022f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156200026d57600080fd5b8201836020820111156200028057600080fd5b80359060200191846001830284011164010000000083111715620002a357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156200030757600080fd5b8201836020820111156200031a57600080fd5b803590602001918460018302840111640100000000831117156200033d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff16906020019092919050505062000651565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200042460048036036020811015620003f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000a89565b005b620004306200058b565b620004a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16620005cf62000b14565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006200065d6200058b565b620006d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620007d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6b656e20616c7265616479206d617070656400000000000000000000000081525060200191505060405180910390fd5b600085858585604051620007e69062000c62565b808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018460ff1660ff168152602001838103835286818151815260200191508051906020019080838360005b83811015620008675780820151818401526020810190506200084a565b50505050905090810190601f168015620008955780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015620008d0578082015181840152602081019050620008b3565b50505050905090810190601f168015620008fe5780820380516001836020036101000a031916815260200191505b509650505050505050604051809103906000f08015801562000924573d6000803e3d6000fd5b50905080600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f85920d35e6c72f6b2affffa04298b0cecfeba86e4a9f407df661f1cb8ab5e61760405160405180910390a380915050949350505050565b62000a936200058b565b62000b06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b62000b118162000b1c565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000ba4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806200396b6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612cfa8062000c718339019056fe60806040523480156200001157600080fd5b5060405162002cfa38038062002cfa833981810160405260808110156200003757600080fd5b8101908080519060200190929190805160405193929190846401000000008211156200006257600080fd5b838201915060208201858111156200007957600080fd5b82518660018202830111640100000000821117156200009757600080fd5b8083526020830192505050908051906020019080838360005b83811015620000cd578082015181840152602081019050620000b0565b50505050905090810190601f168015620000fb5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011f57600080fd5b838201915060208201858111156200013657600080fd5b82518660018202830111640100000000821117156200015457600080fd5b8083526020830192505050908051906020019080838360005b838110156200018a5780820151818401526020810190506200016d565b50505050905090810190601f168015620001b85780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291905050508282828260039080519060200190620001e79291906200035e565b508160049080519060200190620002009291906200035e565b5080600560006101000a81548160ff021916908360ff1602179055505050506000620002316200035660201b60201c565b905080600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156200030b57600080fd5b83600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200040d565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003a157805160ff1916838001178555620003d2565b82800160010185558215620003d2579182015b82811115620003d1578251825591602001919060010190620003b4565b5b509050620003e19190620003e5565b5090565b6200040a91905b8082111562000406576000816000905550600101620003ec565b5090565b90565b6128dd806200041d6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637ecebe00116100b8578063a457c2d71161007c578063a457c2d714610838578063a9059cbb1461089e578063c655d7aa14610904578063d8fa638d14610a09578063dd62ed3e14610a65578063f2fde38b14610add57610142565b80637ecebe00146106a75780638da5cb5b146106ff5780638f32d59b1461074957806395d89b411461076b5780639cdcac9c146107ee57610142565b8063313ce5671161010a578063313ce567146103f157806331f092651461041557806339509351146104fa57806349bdc2b81461056057806370a0823114610645578063715018a61461069d57610142565b806306fdde0314610147578063095ea7b3146101ca57806312a837b41461023057806318160ddd1461034d57806323b872dd1461036b575b600080fd5b61014f610b21565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018f578082015181840152602081019050610174565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610216600480360360408110156101e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc3565b604051808215151515815260200191505060405180910390f35b6103336004803603608081101561024657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156102ad57600080fd5b8201836020820111156102bf57600080fd5b803590602001918460018302840111640100000000831117156102e157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c33565b604051808215151515815260200191505060405180910390f35b610355610f62565b6040518082815260200191505060405180910390f35b6103d76004803603606081101561038157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6c565b604051808215151515815260200191505060405180910390f35b6103f9610fdc565b604051808260ff1660ff16815260200191505060405180910390f35b6104f86004803603606081101561042b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561047257600080fd5b82018360208201111561048457600080fd5b803590602001918460018302840111640100000000831117156104a657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ff3565b005b6105466004803603604081101561051057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111bb565b604051808215151515815260200191505060405180910390f35b6106436004803603606081101561057657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156105bd57600080fd5b8201836020820111156105cf57600080fd5b803590602001918460018302840111640100000000831117156105f157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061126e565b005b6106876004803603602081101561065b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611505565b6040518082815260200191505060405180910390f35b6106a561154d565b005b6106e9600480360360208110156106bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611688565b6040518082815260200191505060405180910390f35b6107076116a0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107516116ca565b604051808215151515815260200191505060405180910390f35b610773611729565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107b3578082015181840152602081019050610798565b50505050905090810190601f1680156107e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107f66117cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108846004803603604081101561084e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117f1565b604051808215151515815260200191505060405180910390f35b6108ea600480360360408110156108b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118be565b604051808215151515815260200191505060405180910390f35b6109c76004803603604081101561091a57600080fd5b81019080803590602001909291908035906020019064010000000081111561094157600080fd5b82018360208201111561095357600080fd5b8035906020019184600183028401116401000000008311171561097557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061192e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a4b60048036036020811015610a1f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ab3565b604051808215151515815260200191505060405180910390f35b610ac760048036036040811015610a7b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ad3565b6040518082815260200191505060405180910390f35b610b1f60048036036020811015610af357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b43565b005b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bb95780601f10610b8e57610100808354040283529160200191610bb9565b820191906000526020600020905b815481529060010190602001808311610b9c57829003601f168201915b5050505050905090565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f44697361626c656420666561747572650000000000000000000000000000000081525060200191505060405180910390fd5b600080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c8186611bc9565b610de057600086868684604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018281526020019450505050506040516020818303038152906040528051906020012090506000610d3182611c0e565b90508773ffffffffffffffffffffffffffffffffffffffff16610d54828761192e565b73ffffffffffffffffffffffffffffffffffffffff1614610ddd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f57726f6e67207369676e6174757265000000000000000000000000000000000081525060200191505060405180910390fd5b50505b610deb868686611c66565b610dff600182611f1c90919063ffffffff16565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f17058394898febb944da4757aec20238c33e9566d2f7b14b2289184e107741b98785886040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f19578082015181840152602081019050610efe565b50505050905090810190601f168015610f465780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a46001915050949350505050565b6000600254905090565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f44697361626c656420666561747572650000000000000000000000000000000081525060200191505060405180910390fd5b6000600560009054906101000a900460ff16905090565b60008211801561100b57508161100884611505565b10155b61101457600080fd5b61101e8383611fa4565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611076600182611f1c90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f33be7eabd8ed368ca1aa14ce2ad1e90a0c9bf21edbb3820d5591546e4eb841578584866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561117957808201518184015260208101905061115e565b50505050905090810190601f1680156111a65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a350505050565b60006112646111c861215c565b8461125f85600160006111d961215c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f1c90919063ffffffff16565b612164565b6001905092915050565b6000821180156112ab5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b6112b457600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661135e576001600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b611368838361235b565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506113c0600182611f1c90919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f99d353966fe3c3445ee3f115b9ce5bc579b0e19a76b2484f79ae9d42e45fe4ce8584866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114c35780820151818401526020810190506114a8565b50505050905090810190601f1680156114f05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6115556116ca565b6115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60076020528060005260406000206000915090505481565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661170d61215c565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117c15780601f10611796576101008083540402835291602001916117c1565b820191906000526020600020905b8154815290600101906020018083116117a457829003601f168201915b5050505050905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006118b46117fe61215c565b846118af85604051806060016040528060258152602001612884602591396001600061182861215c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125169092919063ffffffff16565b612164565b6001905092915050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f44697361626c656420666561747572650000000000000000000000000000000081525060200191505060405180910390fd5b60008060008060418551146119495760009350505050611aad565b602085015192506040850151915060ff6041860151169050601b8160ff16101561197457601b810190505b601b8160ff161415801561198c5750601c8160ff1614155b1561199d5760009350505050611aad565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156119fa573d6000803e3d6000fd5b505050602060405103519350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611aa9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4572726f7220696e2065637265636f766572000000000000000000000000000081525060200191505060405180910390fd5b5050505b92915050565b60086020528060005260406000206000915054906101000a900460ff1681565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f44697361626c656420666561747572650000000000000000000000000000000081525060200191505060405180910390fd5b611b4b6116ca565b611bbd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611bc6816125d6565b50565b600080823f90506000801b8114158015611c0657507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b8114155b915050919050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611cec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061283b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806127676023913960400191505060405180910390fd5b611ddd816040518060600160405280602681526020016127f4602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125169092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e70816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f1c90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015611f9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561202a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061281a6021913960400191505060405180910390fd5b6120958160405180606001604052806022815260200161278a602291396000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125169092919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120ec8160025461271c90919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806128606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612270576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806127d26022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b61241381600254611f1c90919063ffffffff16565b60028190555061246a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f1c90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008383111582906125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561258857808201518184015260208101905061256d565b50505050905090810190601f1680156125b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561265c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127ac6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061275e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612516565b90509291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a723158209e2725d6baff0f154b1b304ef8eb53685ce232a15cf32024bd3c91034b3f35f064736f6c634300050f00324f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a265627a7a72315820bbd161832fa20884b2b1862961cad02508c60142cc4b3c426c8bc4716c349a2264736f6c634300050f0032"

// DeployTokenMapper deploys a new Ethereum contract, binding an instance of TokenMapper to it.
func DeployTokenMapper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMapper, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMapperABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenMapperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMapper{TokenMapperCaller: TokenMapperCaller{contract: contract}, TokenMapperTransactor: TokenMapperTransactor{contract: contract}, TokenMapperFilterer: TokenMapperFilterer{contract: contract}}, nil
}

// TokenMapper is an auto generated Go binding around an Ethereum contract.
type TokenMapper struct {
	TokenMapperCaller     // Read-only binding to the contract
	TokenMapperTransactor // Write-only binding to the contract
	TokenMapperFilterer   // Log filterer for contract events
}

// TokenMapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMapperSession struct {
	Contract     *TokenMapper      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenMapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMapperCallerSession struct {
	Contract *TokenMapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TokenMapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMapperTransactorSession struct {
	Contract     *TokenMapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TokenMapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMapperRaw struct {
	Contract *TokenMapper // Generic contract binding to access the raw methods on
}

// TokenMapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMapperCallerRaw struct {
	Contract *TokenMapperCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMapperTransactorRaw struct {
	Contract *TokenMapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMapper creates a new instance of TokenMapper, bound to a specific deployed contract.
func NewTokenMapper(address common.Address, backend bind.ContractBackend) (*TokenMapper, error) {
	contract, err := bindTokenMapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMapper{TokenMapperCaller: TokenMapperCaller{contract: contract}, TokenMapperTransactor: TokenMapperTransactor{contract: contract}, TokenMapperFilterer: TokenMapperFilterer{contract: contract}}, nil
}

// NewTokenMapperCaller creates a new read-only instance of TokenMapper, bound to a specific deployed contract.
func NewTokenMapperCaller(address common.Address, caller bind.ContractCaller) (*TokenMapperCaller, error) {
	contract, err := bindTokenMapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMapperCaller{contract: contract}, nil
}

// NewTokenMapperTransactor creates a new write-only instance of TokenMapper, bound to a specific deployed contract.
func NewTokenMapperTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMapperTransactor, error) {
	contract, err := bindTokenMapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMapperTransactor{contract: contract}, nil
}

// NewTokenMapperFilterer creates a new log filterer instance of TokenMapper, bound to a specific deployed contract.
func NewTokenMapperFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMapperFilterer, error) {
	contract, err := bindTokenMapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMapperFilterer{contract: contract}, nil
}

// bindTokenMapper binds a generic wrapper to an already deployed contract.
func bindTokenMapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMapperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMapper *TokenMapperRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMapper.Contract.TokenMapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMapper *TokenMapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMapper.Contract.TokenMapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMapper *TokenMapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMapper.Contract.TokenMapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMapper *TokenMapperCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMapper *TokenMapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMapper *TokenMapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMapper.Contract.contract.Transact(opts, method, params...)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_TokenMapper *TokenMapperCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenMapper.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_TokenMapper *TokenMapperSession) IsOwner() (bool, error) {
	return _TokenMapper.Contract.IsOwner(&_TokenMapper.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_TokenMapper *TokenMapperCallerSession) IsOwner() (bool, error) {
	return _TokenMapper.Contract.IsOwner(&_TokenMapper.CallOpts)
}

// MainchainTokenToSidechainToken is a free data retrieval call binding the contract method 0x98aed3ff.
//
// Solidity: function mainchainTokenToSidechainToken(address ) constant returns(address)
func (_TokenMapper *TokenMapperCaller) MainchainTokenToSidechainToken(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenMapper.contract.Call(opts, out, "mainchainTokenToSidechainToken", arg0)
	return *ret0, err
}

// MainchainTokenToSidechainToken is a free data retrieval call binding the contract method 0x98aed3ff.
//
// Solidity: function mainchainTokenToSidechainToken(address ) constant returns(address)
func (_TokenMapper *TokenMapperSession) MainchainTokenToSidechainToken(arg0 common.Address) (common.Address, error) {
	return _TokenMapper.Contract.MainchainTokenToSidechainToken(&_TokenMapper.CallOpts, arg0)
}

// MainchainTokenToSidechainToken is a free data retrieval call binding the contract method 0x98aed3ff.
//
// Solidity: function mainchainTokenToSidechainToken(address ) constant returns(address)
func (_TokenMapper *TokenMapperCallerSession) MainchainTokenToSidechainToken(arg0 common.Address) (common.Address, error) {
	return _TokenMapper.Contract.MainchainTokenToSidechainToken(&_TokenMapper.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenMapper *TokenMapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenMapper.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenMapper *TokenMapperSession) Owner() (common.Address, error) {
	return _TokenMapper.Contract.Owner(&_TokenMapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenMapper *TokenMapperCallerSession) Owner() (common.Address, error) {
	return _TokenMapper.Contract.Owner(&_TokenMapper.CallOpts)
}

// SidechainTokenToMainchainToken is a free data retrieval call binding the contract method 0xe5d24c32.
//
// Solidity: function sidechainTokenToMainchainToken(address ) constant returns(address)
func (_TokenMapper *TokenMapperCaller) SidechainTokenToMainchainToken(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenMapper.contract.Call(opts, out, "sidechainTokenToMainchainToken", arg0)
	return *ret0, err
}

// SidechainTokenToMainchainToken is a free data retrieval call binding the contract method 0xe5d24c32.
//
// Solidity: function sidechainTokenToMainchainToken(address ) constant returns(address)
func (_TokenMapper *TokenMapperSession) SidechainTokenToMainchainToken(arg0 common.Address) (common.Address, error) {
	return _TokenMapper.Contract.SidechainTokenToMainchainToken(&_TokenMapper.CallOpts, arg0)
}

// SidechainTokenToMainchainToken is a free data retrieval call binding the contract method 0xe5d24c32.
//
// Solidity: function sidechainTokenToMainchainToken(address ) constant returns(address)
func (_TokenMapper *TokenMapperCallerSession) SidechainTokenToMainchainToken(arg0 common.Address) (common.Address, error) {
	return _TokenMapper.Contract.SidechainTokenToMainchainToken(&_TokenMapper.CallOpts, arg0)
}

// MapToken is a paid mutator transaction binding the contract method 0xed51c1c8.
//
// Solidity: function mapToken(address _mainchainToken, string _name, string _symbol, uint8 _decimals) returns(address token)
func (_TokenMapper *TokenMapperTransactor) MapToken(opts *bind.TransactOpts, _mainchainToken common.Address, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _TokenMapper.contract.Transact(opts, "mapToken", _mainchainToken, _name, _symbol, _decimals)
}

// MapToken is a paid mutator transaction binding the contract method 0xed51c1c8.
//
// Solidity: function mapToken(address _mainchainToken, string _name, string _symbol, uint8 _decimals) returns(address token)
func (_TokenMapper *TokenMapperSession) MapToken(_mainchainToken common.Address, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _TokenMapper.Contract.MapToken(&_TokenMapper.TransactOpts, _mainchainToken, _name, _symbol, _decimals)
}

// MapToken is a paid mutator transaction binding the contract method 0xed51c1c8.
//
// Solidity: function mapToken(address _mainchainToken, string _name, string _symbol, uint8 _decimals) returns(address token)
func (_TokenMapper *TokenMapperTransactorSession) MapToken(_mainchainToken common.Address, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _TokenMapper.Contract.MapToken(&_TokenMapper.TransactOpts, _mainchainToken, _name, _symbol, _decimals)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenMapper *TokenMapperTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMapper.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenMapper *TokenMapperSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenMapper.Contract.RenounceOwnership(&_TokenMapper.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenMapper *TokenMapperTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenMapper.Contract.RenounceOwnership(&_TokenMapper.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenMapper *TokenMapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TokenMapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenMapper *TokenMapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenMapper.Contract.TransferOwnership(&_TokenMapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenMapper *TokenMapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenMapper.Contract.TransferOwnership(&_TokenMapper.TransactOpts, newOwner)
}

// TokenMapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenMapper contract.
type TokenMapperOwnershipTransferredIterator struct {
	Event *TokenMapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMapperOwnershipTransferred represents a OwnershipTransferred event raised by the TokenMapper contract.
type TokenMapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenMapper *TokenMapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenMapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenMapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenMapperOwnershipTransferredIterator{contract: _TokenMapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenMapper *TokenMapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenMapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenMapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMapperOwnershipTransferred)
				if err := _TokenMapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenMapper *TokenMapperFilterer) ParseOwnershipTransferred(log types.Log) (*TokenMapperOwnershipTransferred, error) {
	event := new(TokenMapperOwnershipTransferred)
	if err := _TokenMapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMapperTokenMappedIterator is returned from FilterTokenMapped and is used to iterate over the raw logs and unpacked data for TokenMapped events raised by the TokenMapper contract.
type TokenMapperTokenMappedIterator struct {
	Event *TokenMapperTokenMapped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMapperTokenMappedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMapperTokenMapped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMapperTokenMapped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMapperTokenMappedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMapperTokenMappedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMapperTokenMapped represents a TokenMapped event raised by the TokenMapper contract.
type TokenMapperTokenMapped struct {
	MainchainToken common.Address
	SidechainToken common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTokenMapped is a free log retrieval operation binding the contract event 0x85920d35e6c72f6b2affffa04298b0cecfeba86e4a9f407df661f1cb8ab5e617.
//
// Solidity: event TokenMapped(address indexed mainchainToken, address indexed sidechainToken)
func (_TokenMapper *TokenMapperFilterer) FilterTokenMapped(opts *bind.FilterOpts, mainchainToken []common.Address, sidechainToken []common.Address) (*TokenMapperTokenMappedIterator, error) {

	var mainchainTokenRule []interface{}
	for _, mainchainTokenItem := range mainchainToken {
		mainchainTokenRule = append(mainchainTokenRule, mainchainTokenItem)
	}
	var sidechainTokenRule []interface{}
	for _, sidechainTokenItem := range sidechainToken {
		sidechainTokenRule = append(sidechainTokenRule, sidechainTokenItem)
	}

	logs, sub, err := _TokenMapper.contract.FilterLogs(opts, "TokenMapped", mainchainTokenRule, sidechainTokenRule)
	if err != nil {
		return nil, err
	}
	return &TokenMapperTokenMappedIterator{contract: _TokenMapper.contract, event: "TokenMapped", logs: logs, sub: sub}, nil
}

// WatchTokenMapped is a free log subscription operation binding the contract event 0x85920d35e6c72f6b2affffa04298b0cecfeba86e4a9f407df661f1cb8ab5e617.
//
// Solidity: event TokenMapped(address indexed mainchainToken, address indexed sidechainToken)
func (_TokenMapper *TokenMapperFilterer) WatchTokenMapped(opts *bind.WatchOpts, sink chan<- *TokenMapperTokenMapped, mainchainToken []common.Address, sidechainToken []common.Address) (event.Subscription, error) {

	var mainchainTokenRule []interface{}
	for _, mainchainTokenItem := range mainchainToken {
		mainchainTokenRule = append(mainchainTokenRule, mainchainTokenItem)
	}
	var sidechainTokenRule []interface{}
	for _, sidechainTokenItem := range sidechainToken {
		sidechainTokenRule = append(sidechainTokenRule, sidechainTokenItem)
	}

	logs, sub, err := _TokenMapper.contract.WatchLogs(opts, "TokenMapped", mainchainTokenRule, sidechainTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMapperTokenMapped)
				if err := _TokenMapper.contract.UnpackLog(event, "TokenMapped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenMapped is a log parse operation binding the contract event 0x85920d35e6c72f6b2affffa04298b0cecfeba86e4a9f407df661f1cb8ab5e617.
//
// Solidity: event TokenMapped(address indexed mainchainToken, address indexed sidechainToken)
func (_TokenMapper *TokenMapperFilterer) ParseTokenMapped(log types.Log) (*TokenMapperTokenMapped, error) {
	event := new(TokenMapperTokenMapped)
	if err := _TokenMapper.contract.UnpackLog(event, "TokenMapped", log); err != nil {
		return nil, err
	}
	return event, nil
}
